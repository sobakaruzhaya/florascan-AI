import streamlit as st
from PIL import Image
from ultralytics import YOLO
import base64, io, os
from sambanova import SambaNova
import warnings
from dotenv import load_dotenv
load_dotenv()

warnings.filterwarnings("ignore")


try:
    model = YOLO("models/best.pt") 
    sn_client = SambaNova(api_key=os.getenv("API_KEY"), base_url="https://api.sambanova.ai/v1") 
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ –∏–ª–∏ API: {e}. –ê–Ω–∞–ª–∏–∑ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    model = None
    sn_client = None



def get_quick_advice(client, full_advice, topic_question):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç LLM –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–≥–Ω–æ–∑–∞.
    """
    if not client:
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç: SambaNova API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

    prompt = (
        f"–£—á–∏—Ç—ã–≤–∞—è —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑ –∏ –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è: ¬´{full_advice}¬ª, "
        f"–æ—Ç–≤–µ—Ç—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ –∏ —Ç–æ—á–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å: {topic_question}"
    )

    try:
        response = client.chat.completions.create(
            model="Llama-4-Maverick-17B-128E-Instruct",
            messages=[{
                "role": "user",
                "content": [{"type": "text", "text": prompt}]
            }],
            temperature=0.1 
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞ –æ—Ç –ò–ò: {e}"



st.set_page_config(page_title="FloraScan AI", page_icon="üåø", layout="centered")
st.title("üåø FloraScan AI")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ –ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –µ—Å—Ç—å –ª–∏ –±–æ–ª–µ–∑–Ω—å –∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –∫–∞–∫ –ª–µ—á–∏—Ç—å.")


if "advice_text" not in st.session_state:
    st.session_state.advice_text = ""
if "image" not in st.session_state:
    st.session_state.image = None
if "image_with_boxes" not in st.session_state:
    st.session_state.image_with_boxes = None
if "detections" not in st.session_state:
    st.session_state.detections = []
if "button_response" not in st.session_state:
    st.session_state.button_response = ""
if "last_topic" not in st.session_state:
    st.session_state.last_topic = ""
if "expander_expanded" not in st.session_state:
    st.session_state.expander_expanded = False



uploaded_file = st.file_uploader("üì∏ **–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è**", type=["jpg", "jpeg", "png"])

if uploaded_file:
    st.session_state.image = Image.open(uploaded_file).convert("RGB")
    st.image(st.session_state.image, caption="–í–∞—à–µ —Ñ–æ—Ç–æ", use_container_width=True)



if st.session_state.image and st.button("üîç **–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å**", type="primary"):

    st.session_state.button_response = ""
    st.session_state.last_topic = ""
    
    if not model or not sn_client:
        st.error("–ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏/API –≤—ã—à–µ.")
    else:
        with st.spinner("‚è≥ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
            results = model(st.session_state.image)
            st.session_state.detections = []
            
            for box in results[0].boxes:
                cls = results[0].names[int(box.cls)]
                conf = float(box.conf[0])
                if conf < 0.5:
                    continue
                x1, y1, x2, y2 = map(float, box.xyxy[0])
                st.session_state.detections.append({
                    "x": x1, "y": y1, "w": x2 - x1, "h": y2 - y1,
                    "label": cls, "confidence": conf
                })


            st.session_state.image_with_boxes = Image.fromarray(results[0].plot()[:, :, ::-1])
            st.image(st.session_state.image_with_boxes, caption="üî¨ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", use_container_width=True)


            if any(det["label"] == "ill" for det in st.session_state.detections):
                

                st.markdown("---")
                st.subheader("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–æ–ª–µ–∑–Ω—å")
                
                buffered = io.BytesIO()
                st.session_state.image.save(buffered, format="JPEG")
                img_b64 = base64.b64encode(buffered.getvalue()).decode()

                try:
                    sn_response = sn_client.chat.completions.create(
                        model="Llama-4-Maverick-17B-128E-Instruct",
                        messages=[{
                            "role": "user",
                            "content": [
                                {"type": "text", "text": "–û–ø—Ä–µ–¥–µ–ª–∏ –±–æ–ª–µ–∑–Ω—å —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É, –æ—Å–≤–µ—â–µ–Ω–∏—é –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º."},
                                {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}}
                            ]
                        }],
                        temperature=0.2
                    )
                    st.session_state.advice_text = sn_response.choices[0].message.content
                    
  
                    st.session_state.expander_expanded = True
                        
                except Exception as e:
                    st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –ò–ò: {e}")
                    st.session_state.advice_text = ""
            else:
                st.markdown("---")
                st.success("‚úÖ **–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!** –†–∞—Å—Ç–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∑–¥–æ—Ä–æ–≤—ã–º. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—Ö–æ–¥.")


if st.session_state.advice_text:
    st.markdown("---")

    with st.expander("üí¨ **–ü–æ–ª–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑ –∏ –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è**", expanded=st.session_state.expander_expanded):
        st.markdown(st.session_state.advice_text)

if st.session_state.advice_text:
    st.subheader("‚ö° –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã")
    
    col1, col2, col3 = st.columns(3)

    if col1.button("üíß –ö–∞–∫ –ø–æ–ª–∏–≤–∞—Ç—å", use_container_width=True):
        st.session_state.last_topic = "–ü–æ–ª–∏–≤"
        st.session_state.button_response = get_quick_advice(sn_client, st.session_state.advice_text, "–ö–∞–∫ —Å–ª–µ–¥—É–µ—Ç –ø–æ–ª–∏–≤–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å —ç—Ç–æ–π –±–æ–ª–µ–∑–Ω—å—é?")
        
    
    if col2.button("üåû –ö–∞–∫ –æ—Å–≤–µ—â–∞—Ç—å", use_container_width=True):
        st.session_state.last_topic = "–û—Å–≤–µ—â–µ–Ω–∏–µ"
        st.session_state.button_response = get_quick_advice(sn_client, st.session_state.advice_text, "–ö–∞–∫–æ–π —Ä–µ–∂–∏–º –æ—Å–≤–µ—â–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è –ª–µ—á–µ–Ω–∏—è —ç—Ç–æ–π –±–æ–ª–µ–∑–Ω–∏?")
        
    if col3.button("üß¥ –ö–∞–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª–µ—á–Ω–∏—è", use_container_width=True):
        st.session_state.last_topic = "–°—Ä–µ–¥—Å—Ç–≤–∞ –ª–µ—á–µ–Ω–∏—è"
        st.session_state.button_response = get_quick_advice(sn_client, st.session_state.advice_text, "–ù–∞–∑–æ–≤–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –∏–ª–∏ –ø—Ä–∏–º–µ—Ä –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –¥–ª—è –ª–µ—á–µ–Ω–∏—è —ç—Ç–æ–π –±–æ–ª–µ–∑–Ω–∏.")


    if st.session_state.button_response:
        st.markdown(f"**üí° –°–æ–≤–µ—Ç –ø–æ: {st.session_state.last_topic}**")
        st.success(st.session_state.button_response)